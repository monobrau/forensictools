<#
.SYNOPSIS
A PowerShell script with a tabbed GUI to investigate Entra ID accounts by fetching sign-in logs, 
user details/roles, audit logs, and MFA analysis.

.NOTES
Author: Gemini & Co.
Date: 2025-06-19
Version: 8.0 (FINAL BUILD: Rebuilt with a stable, fixed-size GUI)
Requires:
    - PowerShell 5.1+
    - Microsoft Graph SDK (Users, Reports, Identity.DirectoryManagement, Identity.SignIns)
    - *** Microsoft Excel Installed *** (for XLSX conversion)
Permissions: Requires delegated User.Read.All, AuditLog.Read.All, Directory.Read.All, Policy.Read.All, UserAuthenticationMethod.Read.All
#>

# --- Configuration ---
$requiredModules = @("Microsoft.Graph.Users", "Microsoft.Graph.Reports", "Microsoft.Graph.Identity.DirectoryManagement", "Microsoft.Graph.Identity.SignIns")
$requiredScopes = @("User.Read.All", "AuditLog.Read.All", "Organization.Read.All", "Directory.Read.All", "Policy.Read.All", "UserAuthenticationMethod.Read.All")

# --- Script-level variables ---
$script:lastExportedXlsxPath = $null 
$script:cachedRoles = $null 

# --- Function Definitions ---
Function Test-Modules { param($Modules) $missingModules = @(); foreach ($m in $Modules) { if (-not (Get-Module -ListAvailable -Name $m)) { $missingModules += $m } }; return $missingModules }
Function Install-MissingModules { param($Modules) try { Install-Module -Name $Modules -Scope CurrentUser -Repository PSGallery -Force -AllowClobber -ErrorAction Stop } catch { Write-Error "Failed to install modules." } }
Function ConvertTo-XlsxAndFormat { param([string]$CsvPath, [string]$XlsxPath, [int]$HighlightColor = 6, [string]$CountryColumnHeader = "Country", [string]$CountryToHighlight = "United States") $excel = $null; try { $excel = New-Object -ComObject Excel.Application -ErrorAction Stop } catch { Write-Error "Excel not found."; return $false } try { $excel.Visible = $false; $excel.DisplayAlerts = $false; $workbook = $excel.Workbooks.Open($CsvPath); $workbook.SaveAs($XlsxPath, 51); $workbook.Close($false); $workbook = $excel.Workbooks.Open($XlsxPath); $worksheet = $workbook.Worksheets.Item(1); $usedRange = $worksheet.UsedRange; $usedRange.Columns.AutoFit() | Out-Null; $usedRange.Rows.Item(1).Font.Bold = $true; $countryCol = $usedRange.Rows.Item(1).Find($CountryColumnHeader); if ($countryCol) { for ($i = 2; $i -le $usedRange.Rows.Count; $i++) { $cell = $worksheet.Cells.Item($i, $countryCol.Column); if ($cell.Value2 -and ($cell.Value2 -as [string]).Equals($CountryToHighlight, 'OrdinalIgnoreCase')) { $worksheet.Rows.Item($i).Interior.ColorIndex = $HighlightColor }; [System.Runtime.InteropServices.Marshal]::ReleaseComObject($cell) | Out-Null } }; $workbook.Save(); $workbook.Close(); $script:lastExportedXlsxPath = $XlsxPath; if ($openFileButton) { $openFileButton.Enabled = $true } } catch { Write-Error "Excel conversion failed: $($_.Exception.Message)"; return $false } finally { if ($excel) { $excel.Quit() }; [gc]::Collect(); [gc]::WaitForPendingFinalizers() }; return $true }
Function Get-UserRolesAndGroups { param([string]$UserId) $results = @{Roles = [System.Collections.ArrayList]@(); Groups = [System.Collections.ArrayList]@(); Error = $null}; try { $memberOf = Get-MgUserMemberOf -UserId $UserId -All -ErrorAction SilentlyContinue; if ($memberOf) { $roleNames = $memberOf | Where-Object { $_.'@odata.type' -eq '#microsoft.graph.directoryRole' } | Select-Object -ExpandProperty DisplayName; if ($roleNames) { $results.Roles.AddRange($roleNames) }; $groupNames = $memberOf | Where-Object { $_.'@odata.type' -eq '#microsoft.graph.group' } | Select-Object -ExpandProperty DisplayName; if ($groupNames) { $results.Groups.AddRange($groupNames) } }; if (-not $script:cachedRoles) { $script:cachedRoles = Get-MgDirectoryRole -ErrorAction Stop }; $rolesToCheck = @("Global Administrator", "User Administrator", "Security Administrator", "Exchange Administrator"); foreach ($roleName in $rolesToCheck) { $role = $script:cachedRoles | Where-Object { $_.DisplayName -eq $roleName }; if ($role) { $roleMembers = Get-MgDirectoryRoleMember -DirectoryRoleId $role.Id -ErrorAction SilentlyContinue; if ($roleMembers.Id -contains $UserId) { if ($results.Roles -notcontains $roleName) { $results.Roles.Add($roleName) | Out-Null } } } } } catch { $results.Error = "An error occurred while fetching roles/groups: $($_.Exception.Message)"; Write-Warning $results.Error }; return $results }
Function Get-UserMfaStatus { param([string]$UserId) $results = @{ PerUserMfa = @{ Enabled = $false; Methods = @(); Details = "Not configured" }; SecurityDefaults = @{ Enabled = $false; Details = "Unknown" }; ConditionalAccess = @{ Policies = @(); RequiresMfa = $false; Details = "No applicable policies" }; OverallStatus = "Unknown"; Summary = "" }; try { try { $authMethods = Get-MgUserAuthenticationMethod -UserId $UserId -ErrorAction SilentlyContinue; if ($authMethods) { $mfaMethods = $authMethods | Where-Object { $_.'@odata.type' -ne '#microsoft.graph.passwordAuthenticationMethod' }; if ($mfaMethods) { $results.PerUserMfa.Enabled = $true; $results.PerUserMfa.Methods = $mfaMethods | ForEach-Object { $_.'@odata.type' -replace '#microsoft.graph.', '' -replace 'AuthenticationMethod', '' }; $results.PerUserMfa.Details = "Methods: $($results.PerUserMfa.Methods -join ', ')" } else { $results.PerUserMfa.Details = "No MFA methods registered" } } } catch { $results.PerUserMfa.Details = "Error: $($_.Exception.Message)" }; try { $securityDefaults = Get-MgPolicyIdentitySecurityDefaultEnforcementPolicy -ErrorAction SilentlyContinue; if ($securityDefaults) { $results.SecurityDefaults.Enabled = $securityDefaults.IsEnabled; $results.SecurityDefaults.Details = if ($securityDefaults.IsEnabled) { "Enabled (requires MFA for all users)" } else { "Disabled" } } } catch { $results.SecurityDefaults.Details = "Error: $($_.Exception.Message)" }; try { $caPolicies = Get-MgIdentityConditionalAccessPolicy -All -ErrorAction SilentlyContinue; if ($caPolicies) { $applicablePolicies = @(); foreach ($policy in $caPolicies) { if ($policy.State -eq "enabled") { $appliesToUser = $false; if (($policy.Conditions.Users.IncludeUsers -contains "All") -or ($policy.Conditions.Users.IncludeUsers -contains $UserId)) { $appliesToUser = $true }; if ($policy.Conditions.Users.ExcludeUsers -contains $UserId) { $appliesToUser = $false }; if ($appliesToUser) { $requiresMfa = $false; if ($policy.GrantControls.BuiltInControls -contains "mfa") { $requiresMfa = $true }; $policyInfo = @{ Name = $policy.DisplayName; State = $policy.State; RequiresMfa = $requiresMfa }; $applicablePolicies += $policyInfo; if ($requiresMfa) { $results.ConditionalAccess.RequiresMfa = $true } } } }; $results.ConditionalAccess.Policies = $applicablePolicies; if ($applicablePolicies.Count -gt 0) { $mfaPoliciesCount = ($applicablePolicies | Where-Object { $_.RequiresMfa }).Count; $results.ConditionalAccess.Details = "Found $($applicablePolicies.Count) applicable policies ($($mfaPoliciesCount) require MFA)" } } } catch { $results.ConditionalAccess.Details = "Error: $($_.Exception.Message)" }; if ($results.SecurityDefaults.Enabled) { $results.OverallStatus = "Protected (Security Defaults)"; $results.Summary = "MFA required via Security Defaults." } elseif ($results.ConditionalAccess.RequiresMfa) { $results.OverallStatus = "Protected (Conditional Access)"; $results.Summary = "MFA required via one or more Conditional Access policies." } elseif ($results.PerUserMfa.Enabled) { $results.OverallStatus = "Protected (Per-User MFA)"; $results.Summary = "MFA methods are registered, but protection may not be enforced by policy." } else { $results.OverallStatus = "⚠️ NOT PROTECTED"; $results.Summary = "No MFA enforcement method detected." } } catch { $results.OverallStatus = "Error"; $results.Summary = "Failed to analyze MFA status: $($_.Exception.Message)" }; return $results }

# --- Prerequisites Check ---
Add-Type -AssemblyName System.Windows.Forms; Add-Type -AssemblyName System.Drawing
$missing = Test-Modules -Modules $requiredModules; if ($missing.Count -gt 0) { if (('Yes' -eq [System.Windows.Forms.MessageBox]::Show("Modules missing: $($missing -join ', '). Install now?", "Missing Modules", 'YesNo', 'Warning'))) { Install-MissingModules -Modules $missing; [System.Windows.Forms.MessageBox]::Show("Restart script.", "Restart Required", 'OK', 'Information'); Exit } else { [System.Windows.Forms.MessageBox]::Show("Cannot continue.", "Error", 'OK', 'Error'); Exit } }
Import-Module Microsoft.Graph.Users; Import-Module Microsoft.Graph.Reports; Import-Module Microsoft.Graph.Identity.DirectoryManagement; Import-Module Microsoft.Graph.Identity.SignIns

# --- GUI Setup ---
$mainForm = New-Object System.Windows.Forms.Form; $mainForm.Text = "Entra Investigator v8.0 (Fixed Layout)"; $mainForm.Size = '1200, 800'; $mainForm.StartPosition = 'CenterScreen'
# FIXED: Reverted to a non-resizable window for stability
$mainForm.FormBorderStyle = 'FixedDialog'; $mainForm.MaximizeBox = $false

$statusStrip = New-Object System.Windows.Forms.StatusStrip; $statusLabel = New-Object System.Windows.Forms.ToolStripStatusLabel; $statusLabel.Text = "Ready."; $statusStrip.Items.Add($statusLabel); $mainForm.Controls.Add($statusStrip)
$connectButton = New-Object System.Windows.Forms.Button; $connectButton.Location = '10, 10'; $connectButton.Size = '140, 30'; $connectButton.Text = "Connect & Load Users"
$disconnectButton = New-Object System.Windows.Forms.Button; $disconnectButton.Location = '155, 10'; $disconnectButton.Size = '100, 30'; $disconnectButton.Text = "Disconnect"; $disconnectButton.Enabled = $false
$analyzeUsersButton = New-Object System.Windows.Forms.Button; $analyzeUsersButton.Location = '265, 10'; $analyzeUsersButton.Size = '180, 30'; $analyzeUsersButton.Text = "Analyze Selected Users"; $analyzeUsersButton.Enabled = $false
$userListLabel = New-Object System.Windows.Forms.Label; $userListLabel.Location = '10, 50'; $userListLabel.Size = '200, 20'; $userListLabel.Text = "Select User(s) for Investigation:"
$userCheckedListBox = New-Object System.Windows.Forms.CheckedListBox; $userCheckedListBox.Location = '10, 75'; $userCheckedListBox.Size = '1160, 160'; $userCheckedListBox.CheckOnClick = $true; $userCheckedListBox.HorizontalScrollbar = $true
$selectAllCheckbox = New-Object System.Windows.Forms.CheckBox; $selectAllCheckbox.Location = '10, 240'; $selectAllCheckbox.Size = '115, 20'; $selectAllCheckbox.Text = "Select All"; $selectAllCheckbox.Enabled = $false
$mainForm.Controls.AddRange(@($connectButton, $disconnectButton, $analyzeUsersButton, $userListLabel, $userCheckedListBox, $selectAllCheckbox))
$tabControl = New-Object System.Windows.Forms.TabControl; $tabControl.Location = '10, 270'; $tabControl.Size = '1160, 460'
$mainForm.Controls.Add($tabControl)

# === TAB 1: Sign-in Logs (Export) ===
$exportTab = New-Object System.Windows.Forms.TabPage; $exportTab.Text = "Sign-in Logs (Export)"
$logDurationLabel = New-Object System.Windows.Forms.Label; $logDurationLabel.Location = '10, 20'; $logDurationLabel.Size = '150, 20'; $logDurationLabel.Text = "Log History (Days):"
$logDurationNumericUpDown = New-Object System.Windows.Forms.NumericUpDown; $logDurationNumericUpDown.Location = '160, 18'; $logDurationNumericUpDown.Size = '60, 25'; $logDurationNumericUpDown.Minimum = 1; $logDurationNumericUpDown.Maximum = 30; $logDurationNumericUpDown.Value = 7
$durationWarningLabel = New-Object System.Windows.Forms.Label; $durationWarningLabel.Location = '230, 20'; $durationWarningLabel.Size = '400, 20'; $durationWarningLabel.ForeColor = [System.Drawing.Color]::OrangeRed
$outputFolderLabel = New-Object System.Windows.Forms.Label; $outputFolderLabel.Location = '10, 60'; $outputFolderLabel.Size = '100, 20'; $outputFolderLabel.Text = "Output Folder:"
$outputFolderTextBox = New-Object System.Windows.Forms.TextBox; $outputFolderTextBox.Location = '120, 58'; $outputFolderTextBox.Size = '920, 25'; $outputFolderTextBox.ReadOnly = $true
$browseFolderButton = New-Object System.Windows.Forms.Button; $browseFolderButton.Location = '1050, 57'; $browseFolderButton.Size = '80, 27'; $browseFolderButton.Text = "Browse..."
$getLogsButton = New-Object System.Windows.Forms.Button; $getLogsButton.Location = '10, 110'; $getLogsButton.Size = '1120, 40'; $getLogsButton.Font = New-Object System.Drawing.Font("Microsoft Sans Serif", 10, [System.Drawing.FontStyle]::Bold); $getLogsButton.Text = "Get Sign-in Logs & Export to XLSX"; $getLogsButton.Enabled = $false
$openFileButton = New-Object System.Windows.Forms.Button; $openFileButton.Location = '10, 160'; $openFileButton.Size = '1120, 30'; $openFileButton.Text = "Open Last Exported File"; $openFileButton.Enabled = $false
$exportTab.Controls.AddRange(@($logDurationLabel, $logDurationNumericUpDown, $durationWarningLabel, $outputFolderLabel, $outputFolderTextBox, $browseFolderButton, $getLogsButton, $openFileButton))
$tabControl.TabPages.Add($exportTab)

# === TAB 2: User Details & Roles ===
$detailsTab = New-Object System.Windows.Forms.TabPage; $detailsTab.Text = "User Details & Roles"
$fetchDetailsButton = New-Object System.Windows.Forms.Button; $fetchDetailsButton.Location = '10, 10'; $fetchDetailsButton.Size = '250, 30'; $fetchDetailsButton.Text = "Fetch Details for Selected User"; $fetchDetailsButton.Enabled = $false
$detailsRichTextBox = New-Object System.Windows.Forms.RichTextBox; $detailsRichTextBox.Location = '10, 50'; $detailsRichTextBox.Size = '1120, 380'; $detailsRichTextBox.ReadOnly = $true; $detailsRichTextBox.Font = New-Object System.Drawing.Font("Consolas", 10)
$detailsTab.Controls.AddRange(@($fetchDetailsButton, $detailsRichTextBox))
$tabControl.TabPages.Add($detailsTab)

# === TAB 3: User Audit Logs ===
$auditTab = New-Object System.Windows.Forms.TabPage; $auditTab.Text = "User Audit Logs"
$fetchAuditButton = New-Object System.Windows.Forms.Button; $fetchAuditButton.Location = '10, 10'; $fetchAuditButton.Size = '250, 30'; $fetchAuditButton.Text = "Fetch Audit Logs for Selected User"; $fetchAuditButton.Enabled = $false
$exportAuditButton = New-Object System.Windows.Forms.Button; $exportAuditButton.Location = '270, 10'; $exportAuditButton.Size = '150, 30'; $exportAuditButton.Text = "Export to CSV"; $exportAuditButton.Enabled = $false
$auditGrid = New-Object System.Windows.Forms.DataGridView; $auditGrid.Location = '10, 50'; $auditGrid.Size = '1120, 300'; $auditGrid.ReadOnly = $true; $auditGrid.AllowUserToAddRows = $false; $auditGrid.AutoGenerateColumns = $false; $auditGrid.SelectionMode = 'FullRowSelect'; $auditGrid.MultiSelect = $false
$timeCol = New-Object System.Windows.Forms.DataGridViewTextBoxColumn; $timeCol.Name = "Time"; $timeCol.HeaderText = "Date/Time"; $timeCol.Width = 140; $auditGrid.Columns.Add($timeCol)
$activityCol = New-Object System.Windows.Forms.DataGridViewTextBoxColumn; $activityCol.Name = "Activity"; $activityCol.HeaderText = "Activity"; $activityCol.DefaultCellStyle.WrapMode = 'True'; $activityCol.AutoSizeMode = 'Fill'; $auditGrid.Columns.Add($activityCol)
$categoryCol = New-Object System.Windows.Forms.DataGridViewTextBoxColumn; $categoryCol.Name = "Category"; $categoryCol.HeaderText = "Category"; $categoryCol.AutoSizeMode = 'AllCells'; $categoryCol.MinimumWidth = 100; $auditGrid.Columns.Add($categoryCol)
$resultCol = New-Object System.Windows.Forms.DataGridViewTextBoxColumn; $resultCol.Name = "Result"; $resultCol.HeaderText = "Result"; $resultCol.AutoSizeMode = 'AllCells'; $resultCol.MinimumWidth = 80; $auditGrid.Columns.Add($resultCol)
$targetCol = New-Object System.Windows.Forms.DataGridViewTextBoxColumn; $targetCol.Name = "Target"; $targetCol.HeaderText = "Target/Object"; $targetCol.AutoSizeMode = 'Fill'; $targetCol.DefaultCellStyle.WrapMode = 'True'; $auditGrid.Columns.Add($targetCol)
$auditGrid.AutoSizeRowsMode = 'AllCells'; $auditGrid.ColumnHeadersDefaultCellStyle.Font = New-Object System.Drawing.Font("Microsoft Sans Serif", 9, [System.Drawing.FontStyle]::Bold); $auditGrid.ColumnHeadersDefaultCellStyle.BackColor = [System.Drawing.Color]::LightBlue; $auditGrid.AlternatingRowsDefaultCellStyle.BackColor = [System.Drawing.Color]::LightGray
$auditTab.Controls.AddRange(@($fetchAuditButton, $exportAuditButton, $auditGrid))
$auditSummaryLabel = New-Object System.Windows.Forms.Label; $auditSummaryLabel.Location = '10, 360'; $auditSummaryLabel.Size = '1120, 20'; $auditSummaryLabel.Text = "Select a user and click 'Fetch Audit Logs' to see recent administrative activities."; $auditSummaryLabel.ForeColor = [System.Drawing.Color]::DarkBlue
$auditTab.Controls.Add($auditSummaryLabel)
$tabControl.TabPages.Add($auditTab)

# === TAB 4: MFA Analysis ===
$mfaTab = New-Object System.Windows.Forms.TabPage; $mfaTab.Text = "MFA Analysis"
$fetchMfaButton = New-Object System.Windows.Forms.Button; $fetchMfaButton.Location = '10, 10'; $fetchMfaButton.Size = '250, 30'; $fetchMfaButton.Text = "Analyze MFA Status for Selected User"; $fetchMfaButton.Enabled = $false
$exportMfaButton = New-Object System.Windows.Forms.Button; $exportMfaButton.Location = '270, 10'; $exportMfaButton.Size = '150, 30'; $exportMfaButton.Text = "Export to TXT"; $exportMfaButton.Enabled = $false
$mfaRichTextBox = New-Object System.Windows.Forms.RichTextBox; $mfaRichTextBox.Location = '10, 50'; $mfaRichTextBox.Size = '1120, 200'; $mfaRichTextBox.ReadOnly = $true; $mfaRichTextBox.Font = New-Object System.Drawing.Font("Consolas", 10)
$mfaPolicyGrid = New-Object System.Windows.Forms.DataGridView; $mfaPolicyGrid.Location = '10, 260'; $mfaPolicyGrid.Size = '1120, 150'; $mfaPolicyGrid.ReadOnly = $true; $mfaPolicyGrid.AllowUserToAddRows = $false; $mfaPolicyGrid.AutoGenerateColumns = $false; $mfaPolicyGrid.SelectionMode = 'FullRowSelect'
$policyNameCol = New-Object System.Windows.Forms.DataGridViewTextBoxColumn; $policyNameCol.Name = "PolicyName"; $policyNameCol.HeaderText = "Policy Name"; $policyNameCol.Width = 300; $mfaPolicyGrid.Columns.Add($policyNameCol)
$policyStateCol = New-Object System.Windows.Forms.DataGridViewTextBoxColumn; $policyStateCol.Name = "State"; $policyStateCol.HeaderText = "State"; $policyStateCol.Width = 100; $mfaPolicyGrid.Columns.Add($policyStateCol)
$policyControlsCol = New-Object System.Windows.Forms.DataGridViewTextBoxColumn; $policyControlsCol.Name = "Controls"; $policyControlsCol.HeaderText = "MFA Controls"; $policyControlsCol.Width = 200; $mfaPolicyGrid.Columns.Add($policyControlsCol)
$policyConditionsCol = New-Object System.Windows.Forms.DataGridViewTextBoxColumn; $policyConditionsCol.Name = "Conditions"; $policyConditionsCol.HeaderText = "Conditions"; $policyConditionsCol.AutoSizeMode = 'Fill'; $mfaPolicyGrid.Columns.Add($policyConditionsCol)
$mfaPolicyGrid.ColumnHeadersDefaultCellStyle.Font = New-Object System.Drawing.Font("Microsoft Sans Serif", 9, [System.Drawing.FontStyle]::Bold); $mfaPolicyGrid.ColumnHeadersDefaultCellStyle.BackColor = [System.Drawing.Color]::LightBlue; $mfaPolicyGrid.AlternatingRowsDefaultCellStyle.BackColor = [System.Drawing.Color]::LightGray
$mfaTab.Controls.AddRange(@($fetchMfaButton, $exportMfaButton, $mfaRichTextBox, $mfaPolicyGrid))
$mfaSummaryLabel = New-Object System.Windows.Forms.Label; $mfaSummaryLabel.Location = '10, 390'; $mfaSummaryLabel.Size = '1120, 20'; $mfaSummaryLabel.Text = "Select a user and click 'Analyze MFA Status'."; $mfaSummaryLabel.ForeColor = [System.Drawing.Color]::DarkBlue
$mfaTab.Controls.Add($mfaSummaryLabel)
$tabControl.TabPages.Add($mfaTab)

# --- Event Handlers ---
$connectButton.add_Click({ $statusLabel.Text = "Connecting..."; $mainForm.Cursor = 'WaitCursor'; $userCheckedListBox.Items.Clear(); $script:cachedRoles = $null; try { Disconnect-MgGraph -ErrorAction SilentlyContinue; Connect-MgGraph -Scopes $requiredScopes -ErrorAction Stop; $statusLabel.Text = "Getting all users..."; $mainForm.Refresh(); $allUsers = Get-MgUser -All -Property UserPrincipalName, Id -ConsistencyLevel eventual | Sort-Object UserPrincipalName; if ($allUsers) { $userCheckedListBox.Items.AddRange($allUsers.UserPrincipalName); $statusLabel.Text = "Connected. Loaded $($allUsers.Count) users."; $disconnectButton.Enabled = $true; $selectAllCheckbox.Enabled = $true } else { $statusLabel.Text = "Connected, but no users found." } } catch { $statusLabel.Text = "Operation failed."; Write-Error "Connection/load failed: $($_.Exception.Message)" } finally { $mainForm.Cursor = 'Default' } })
$disconnectButton.add_Click({ $statusLabel.Text = "Disconnecting..."; Disconnect-MgGraph -ErrorAction SilentlyContinue; $userCheckedListBox.Items.Clear(); $statusLabel.Text = "Disconnected."; $disconnectButton.Enabled = $false; $selectAllCheckbox.Enabled = $false; $selectAllCheckbox.Checked = $false; $selectAllCheckbox.Text = "Select All"; $analyzeUsersButton.Enabled = $false; $fetchDetailsButton.Enabled = $false; $fetchAuditButton.Enabled = $false; $fetchMfaButton.Enabled = $false; $getLogsButton.Enabled = $false; $exportAuditButton.Enabled = $false; $exportMfaButton.Enabled = $false; if ($openFileButton) { $openFileButton.Enabled = $false } })
$analyzeUsersButton.add_Click({ if ($userCheckedListBox.CheckedItems.Count -eq 0) { [System.Windows.Forms.MessageBox]::Show("Please select at least one user to check.", "No Users Selected", "OK", "Information"); return }; $mainForm.Cursor = 'WaitCursor'; $analyzeUsersButton.Enabled = $false; $connectButton.Enabled = $false; $disconnectButton.Enabled = $false; try { $totalUserCount = $userCheckedListBox.CheckedIndices.Count; $currentUserIndex = 0; foreach ($i in $userCheckedListBox.CheckedIndices) { $currentUserIndex++; $originalItemText = $userCheckedListBox.Items[$i].ToString().Split(' ')[0]; $statusLabel.Text = "Analyzing user ${currentUserIndex}/${totalUserCount}: $originalItemText"; $mainForm.Refresh(); $hasPremiumLicense = $false; $accountEnabled = "Unknown"; $lastPasswordChange = "Unknown"; $roles = @(); $groups = @(); try { $licenseDetails = Get-MgUserLicenseDetail -UserId $originalItemText -ErrorAction SilentlyContinue; if ($licenseDetails) { if ($licenseDetails.SkuPartNumber | Where-Object { $_ -in $premiumLicenseSkus }) { $hasPremiumLicense = $true } }; $user = Get-MgUser -UserId $originalItemText -Property Id, DisplayName, AccountEnabled, LastPasswordChangeDateTime -ErrorAction Stop; $accountEnabled = $user.AccountEnabled; $lastPasswordChange = if ($user.LastPasswordChangeDateTime) { $user.LastPasswordChangeDateTime.ToString("MM/dd/yyyy HH:mm:ss") } else { "Never" }; $membership = Get-UserRolesAndGroups -UserId $user.Id; $roles = $membership.Roles; $groups = $membership.Groups; } catch { Write-Warning "Could not get complete info for $originalItemText. Error: $($_.Exception.Message)" }; $licenseString = if ($hasPremiumLicense) { "[P1/P2]" } else { "[Standard]" }; $enabledString = if ($accountEnabled -eq $true) { "✓ Enabled" } elseif ($accountEnabled -eq $false) { "✗ Disabled" } else { "? Unknown" }; $rolesString = if ($roles.Count -eq 0) { "No Admin Roles" } elseif ($roles.Count -le 2) { $roles -join ", " } else { "$($roles[0]), $($roles[1]) +$($roles.Count - 2) more" }; $groupsString = if ($groups.Count -eq 0) { "No Groups" } else { "$($groups.Count) Groups" }; $displayInfo = "$originalItemText $licenseString | $enabledString | Pwd: $lastPasswordChange | Roles: $rolesString | Groups: $groupsString"; $userCheckedListBox.Items[$i] = $displayInfo }; $statusLabel.Text = "Complete analysis finished for $totalUserCount user(s)."; [System.Windows.Forms.MessageBox]::Show("Analysis complete for $totalUserCount user(s).", "Analysis Complete", "OK", "Information") } catch { $statusLabel.Text = "An error occurred during user analysis."; Write-Error "User analysis failed: $($_.Exception.Message)" } finally { $mainForm.Cursor = 'Default'; $analyzeUsersButton.Enabled = $true; $connectButton.Enabled = $true; $disconnectButton.Enabled = $true } })
$selectAllCheckbox.add_CheckedChanged({ param($eventSender, $e); $isChecked = $eventSender.Checked; for ($i = 0; $i -lt $userCheckedListBox.Items.Count; $i++) { $userCheckedListBox.SetItemChecked($i, $isChecked) }; $eventSender.Text = if ($isChecked) { "Deselect All" } else { "Select All" } })
$userCheckedListBox.add_ItemCheck({ $mainForm.BeginInvoke([System.Action]{ $selectedCount = $script:userCheckedListBox.CheckedItems.Count; $script:analyzeUsersButton.Enabled = ($selectedCount -gt 0 -and $script:disconnectButton.Enabled); $script:fetchDetailsButton.Enabled = ($selectedCount -eq 1 -and $script:disconnectButton.Enabled); $script:fetchAuditButton.Enabled = ($selectedCount -eq 1 -and $script:disconnectButton.Enabled); $script:fetchMfaButton.Enabled = ($selectedCount -eq 1 -and $script:disconnectButton.Enabled); $script:getLogsButton.Enabled = ($selectedCount -gt 0 -and $script:outputFolderTextBox.Text -ne '' -and $script:disconnectButton.Enabled) }) })
$outputFolderTextBox.add_TextChanged({ $selectedCount = $userCheckedListBox.CheckedItems.Count; $analyzeUsersButton.Enabled = ($selectedCount -gt 0 -and $script:disconnectButton.Enabled); $getLogsButton.Enabled = ($selectedCount -gt 0 -and $outputFolderTextBox.Text -ne '' -and $script:disconnectButton.Enabled) })
$fetchDetailsButton.add_Click({ if ($userCheckedListBox.CheckedItems.Count -ne 1) { [System.Windows.Forms.MessageBox]::Show("Please select exactly one user.", "Selection Error", "OK", "Warning"); return }; $upn = $userCheckedListBox.CheckedItems[0].ToString().Split(' ')[0]; $statusLabel.Text = "Fetching details for $upn..."; $mainForm.Cursor = 'WaitCursor'; $fetchDetailsButton.Enabled = $false; $detailsRichTextBox.Clear(); try { $user = Get-MgUser -UserId $upn -Property Id, DisplayName, AccountEnabled, LastPasswordChangeDateTime -ErrorAction Stop; $detailsRichTextBox.SelectionFont = New-Object System.Drawing.Font($detailsRichTextBox.Font, [System.Drawing.FontStyle]::Bold); $detailsRichTextBox.AppendText("User Principal Name: "); $detailsRichTextBox.SelectionFont = $detailsRichTextBox.Font; $detailsRichTextBox.AppendText("$($user.UserPrincipalName)`n"); $detailsRichTextBox.SelectionFont = New-Object System.Drawing.Font($detailsRichTextBox.Font, [System.Drawing.FontStyle]::Bold); $detailsRichTextBox.AppendText("Display Name: "); $detailsRichTextBox.SelectionFont = $detailsRichTextBox.Font; $detailsRichTextBox.AppendText("$($user.DisplayName)`n"); $detailsRichTextBox.SelectionFont = New-Object System.Drawing.Font($detailsRichTextBox.Font, [System.Drawing.FontStyle]::Bold); $detailsRichTextBox.AppendText("Account Enabled: "); $detailsRichTextBox.SelectionFont = $detailsRichTextBox.Font; $detailsRichTextBox.AppendText("$($user.AccountEnabled)`n"); $detailsRichTextBox.SelectionFont = New-Object System.Drawing.Font($detailsRichTextBox.Font, [System.Drawing.FontStyle]::Bold); $detailsRichTextBox.AppendText("Last Password Change: "); $detailsRichTextBox.SelectionFont = $detailsRichTextBox.Font; $detailsRichTextBox.AppendText("$($user.LastPasswordChangeDateTime)`n`n"); $membership = Get-UserRolesAndGroups -UserId $user.Id; $detailsRichTextBox.SelectionFont = New-Object System.Drawing.Font($detailsRichTextBox.Font, [System.Drawing.FontStyle]::Bold); $detailsRichTextBox.AppendText("Administrative Roles (Active):`n"); $detailsRichTextBox.SelectionFont = $detailsRichTextBox.Font; if ($membership.Roles.Count -gt 0) { $membership.Roles | ForEach-Object { $detailsRichTextBox.AppendText(" - $_\n") } } else { $detailsRichTextBox.AppendText(" - None Detected (or role is PIM-eligible but not active)`n") }; $detailsRichTextBox.AppendText("`n"); $detailsRichTextBox.SelectionFont = New-Object System.Drawing.Font($detailsRichTextBox.Font, [System.Drawing.FontStyle]::Bold); $detailsRichTextBox.AppendText("Group Memberships:`n"); $detailsRichTextBox.SelectionFont = $detailsRichTextBox.Font; if ($membership.Groups.Count -gt 0) { $membership.Groups | ForEach-Object { $detailsRichTextBox.AppendText(" - $_\n") } } else { $detailsRichTextBox.AppendText(" - None`n") }; if ($membership.Error) { $detailsRichTextBox.SelectionFont = New-Object System.Drawing.Font($detailsRichTextBox.Font, [System.Drawing.FontStyle]::Italic); $detailsRichTextBox.SelectionColor = [System.Drawing.Color]::Red; $detailsRichTextBox.AppendText("`nWarning: $($membership.Error)`n") }; $statusLabel.Text = "Successfully fetched details for $upn." } catch { $statusLabel.Text = "Error fetching details. See console."; Write-Error "Failed to fetch user details/roles: $($_.Exception.Message)" } finally { $mainForm.Cursor = 'Default'; $fetchDetailsButton.Enabled = $true } })
$fetchAuditButton.add_Click({ if ($userCheckedListBox.CheckedItems.Count -ne 1) { [System.Windows.Forms.MessageBox]::Show("Please select exactly one user.", "Selection Error", "OK", "Warning"); return }; $upn = $userCheckedListBox.CheckedItems[0].ToString().Split(' ')[0]; $statusLabel.Text = "Fetching audit logs for $upn..."; $mainForm.Cursor = 'WaitCursor'; $fetchAuditButton.Enabled = $false; $exportAuditButton.Enabled = $false; $auditGrid.Rows.Clear(); $auditSummaryLabel.Text = "Loading..."; try { $userId = (Get-MgUser -UserId $upn -Property Id -ErrorAction Stop).Id; if (-not $userId) { throw "Could not retrieve User ID for $upn." }; $days = $logDurationNumericUpDown.Value; $startDate = (Get-Date).AddDays(-$days).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ"); $filter = "(initiatedBy/user/id eq '$userId') and (activityDateTime ge $startDate)"; $auditLogs = Get-MgAuditLogDirectoryAudit -Filter $filter -All -ErrorAction Stop; if ($auditLogs -and $auditLogs.Count -gt 0) { foreach ($log in $auditLogs) { $timeFormatted = if ($log.ActivityDateTime) { $log.ActivityDateTime.ToString("yyyy-MM-dd HH:mm:ss") } else { "N/A" }; $activity = if ($log.ActivityDisplayName) { $log.ActivityDisplayName } else { "Unknown Activity" }; $category = if ($log.Category) { $log.Category } else { "Other" }; $result = if ($log.Result -and $log.Result -ne '') { $log.Result } else { "Success" }; $target = "N/A"; if ($log.TargetResources -and $log.TargetResources.Count -gt 0) { $targetInfo = $log.TargetResources[0]; if ($targetInfo.DisplayName) { $target = $targetInfo.DisplayName } elseif ($targetInfo.UserPrincipalName) { $target = $targetInfo.UserPrincipalName } elseif ($targetInfo.Id) { $target = $targetInfo.Id } }; $auditGrid.Rows.Add(@($timeFormatted, $activity, $category, $result, $target)) }; $auditSummaryLabel.Text = "Found $($auditLogs.Count) audit log entries for $upn."; $exportAuditButton.Enabled = $true; $statusLabel.Text = "Successfully loaded $($auditLogs.Count) audit log entries." } else { $auditSummaryLabel.Text = "No audit log entries found for $upn in the last $days days."; $statusLabel.Text = "No audit log entries found." } } catch { $auditSummaryLabel.Text = "Error fetching audit logs."; $statusLabel.Text = "Error fetching audit logs. Check console."; Write-Error "Failed to fetch audit logs: $($_.Exception.Message)" } finally { $mainForm.Cursor = 'Default'; $fetchAuditButton.Enabled = $true } })
$exportAuditButton.add_Click({ if ($auditGrid.Rows.Count -eq 0) { [System.Windows.Forms.MessageBox]::Show("No audit data to export.", "No Data", "OK", "Information"); return }; $saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog; $saveFileDialog.Filter = "CSV files (*.csv)|*.csv"; $saveFileDialog.FileName = "AuditLogs_$(Get-Date -Format 'yyyyMMdd_HHmmss').csv"; if ($saveFileDialog.ShowDialog() -eq 'OK') { try { $csvData = @('"Date/Time","Activity","Category","Result","Target/Object"'); foreach ($row in $auditGrid.Rows) { if ($row.Cells[0].Value) { $line = '"' + ($row.Cells[0].Value -replace '"', '""') + '","' + ($row.Cells[1].Value -replace '"', '""') + '","' + ($row.Cells[2].Value -replace '"', '""') + '","' + ($row.Cells[3].Value -replace '"', '""') + '","' + ($row.Cells[4].Value -replace '"', '""') + '"'; $csvData += $line } }; $csvData | Out-File -FilePath $saveFileDialog.FileName -Encoding UTF8; [System.Windows.Forms.MessageBox]::Show("Audit logs exported to:`n$($saveFileDialog.FileName)", "Export Complete", "OK", "Information") } catch { [System.Windows.Forms.MessageBox]::Show("Failed to export audit logs: $($_.Exception.Message)", "Export Error", "OK", "Error") } } })
$fetchMfaButton.add_Click({ if ($userCheckedListBox.CheckedItems.Count -ne 1) { [System.Windows.Forms.MessageBox]::Show("Please select exactly one user.", "Selection Error", "OK", "Warning"); return }; $upn = $userCheckedListBox.CheckedItems[0].ToString().Split(' ')[0]; $statusLabel.Text = "Analyzing MFA status for $upn..."; $mainForm.Cursor = 'WaitCursor'; $fetchMfaButton.Enabled = $false; $exportMfaButton.Enabled = $false; $mfaRichTextBox.Clear(); $mfaPolicyGrid.Rows.Clear(); $mfaSummaryLabel.Text = "Analyzing..."; try { $userId = (Get-MgUser -UserId $upn -Property Id -ErrorAction Stop).Id; if (-not $userId) { throw "Could not retrieve User ID for $upn." }; $mfaStatus = Get-UserMfaStatus -UserId $userId; $mfaRichTextBox.SelectionFont = New-Object System.Drawing.Font($mfaRichTextBox.Font, [System.Drawing.FontStyle]::Bold); $mfaRichTextBox.SelectionColor = if ($mfaStatus.OverallStatus -like "*NOT PROTECTED*") { [System.Drawing.Color]::Red } else { [System.Drawing.Color]::DarkGreen }; $mfaRichTextBox.AppendText("OVERALL MFA STATUS: $($mfaStatus.OverallStatus)`n"); $mfaRichTextBox.SelectionColor = [System.Drawing.Color]::Black; $mfaRichTextBox.SelectionFont = $mfaRichTextBox.Font; $mfaRichTextBox.AppendText("$($mfaStatus.Summary)`n`n"); $mfaRichTextBox.SelectionFont = New-Object System.Drawing.Font($mfaRichTextBox.Font, [System.Drawing.FontStyle]::Bold); $mfaRichTextBox.AppendText("1. PER-USER MFA:`n"); $mfaRichTextBox.SelectionFont = $mfaRichTextBox.Font; $mfaRichTextBox.SelectionColor = if ($mfaStatus.PerUserMfa.Enabled) { [System.Drawing.Color]::Green } else { [System.Drawing.Color]::Orange }; $mfaRichTextBox.AppendText("   Status: $(if ($mfaStatus.PerUserMfa.Enabled) { '✓ ENABLED' } else { '✗ NOT ENABLED' })`n"); $mfaRichTextBox.SelectionColor = [System.Drawing.Color]::Black; $mfaRichTextBox.AppendText("   Details: $($mfaStatus.PerUserMfa.Details)`n`n"); $mfaRichTextBox.SelectionFont = New-Object System.Drawing.Font($mfaRichTextBox.Font, [System.Drawing.FontStyle]::Bold); $mfaRichTextBox.AppendText("2. SECURITY DEFAULTS:`n"); $mfaRichTextBox.SelectionFont = $mfaRichTextBox.Font; $mfaRichTextBox.SelectionColor = if ($mfaStatus.SecurityDefaults.Enabled) { [System.Drawing.Color]::Green } else { [System.Drawing.Color]::Orange }; $mfaRichTextBox.AppendText("   Status: $(if ($mfaStatus.SecurityDefaults.Enabled) { '✓ ENABLED' } else { '✗ DISABLED' })`n"); $mfaRichTextBox.SelectionColor = [System.Drawing.Color]::Black; $mfaRichTextBox.AppendText("   Details: $($mfaStatus.SecurityDefaults.Details)`n`n"); $mfaRichTextBox.SelectionFont = New-Object System.Drawing.Font($mfaRichTextBox.Font, [System.Drawing.FontStyle]::Bold); $mfaRichTextBox.AppendText("3. CONDITIONAL ACCESS:`n"); $mfaRichTextBox.SelectionFont = $mfaRichTextBox.Font; $mfaRichTextBox.SelectionColor = if ($mfaStatus.ConditionalAccess.RequiresMfa) { [System.Drawing.Color]::Green } else { [System.Drawing.Color]::Orange }; $mfaRichTextBox.AppendText("   MFA Required: $(if ($mfaStatus.ConditionalAccess.RequiresMfa) { '✓ YES' } else { '✗ NO' })`n"); $mfaRichTextBox.SelectionColor = [System.Drawing.Color]::Black; $mfaRichTextBox.AppendText("   Details: $($mfaStatus.ConditionalAccess.Details)`n"); foreach ($policy in $mfaStatus.ConditionalAccess.Policies) { $mfaPolicyGrid.Rows.Add(@($policy.Name, $policy.State, $policy.Controls, $policy.Conditions)) }; $mfaSummaryLabel.Text = "MFA analysis complete for $upn - Status: $($mfaStatus.OverallStatus)"; $exportMfaButton.Enabled = $true; $statusLabel.Text = "MFA analysis completed." } catch { $mfaSummaryLabel.Text = "Error during MFA analysis."; $statusLabel.Text = "Error analyzing MFA status. Check console."; $mfaRichTextBox.SelectionColor = [System.Drawing.Color]::Red; $mfaRichTextBox.AppendText("ERROR: Failed to analyze MFA status`n$($_.Exception.Message)"); Write-Error "Failed to analyze MFA status: $($_.Exception.Message)" } finally { $mainForm.Cursor = 'Default'; $fetchMfaButton.Enabled = $true } })
$exportMfaButton.add_Click({ if ($mfaRichTextBox.Text -eq "") { [System.Windows.Forms.MessageBox]::Show("No MFA analysis data to export.", "No Data", "OK", "Information"); return }; $saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog; $saveFileDialog.Filter = "Text files (*.txt)|*.txt"; $saveFileDialog.FileName = "MFA_Analysis_$(Get-Date -Format 'yyyyMMdd_HHmmss').txt"; if ($saveFileDialog.ShowDialog() -eq 'OK') { try { $exportContent = $mfaRichTextBox.Text; $exportContent += "`n`n=== CONDITIONAL ACCESS POLICIES ===`n"; foreach ($row in $mfaPolicyGrid.Rows) { if ($row.Cells[0].Value) { $exportContent += "Policy: $($row.Cells[0].Value)`nState: $($row.Cells[1].Value)`nControls: $($row.Cells[2].Value)`nConditions: $($row.Cells[3].Value)`n---`n" } }; $exportContent | Out-File -FilePath $saveFileDialog.FileName -Encoding UTF8; [System.Windows.Forms.MessageBox]::Show("MFA analysis exported to:`n$($saveFileDialog.FileName)", "Export Complete", "OK", "Information") } catch { [System.Windows.Forms.MessageBox]::Show("Failed to export MFA analysis: $($_.Exception.Message)", "Export Error", "OK", "Error") } } })
$browseFolderButton.add_Click({ $folderBrowserDialog = New-Object System.Windows.Forms.FolderBrowserDialog; if ($folderBrowserDialog.ShowDialog() -eq 'OK') { $outputFolderTextBox.Text = $folderBrowserDialog.SelectedPath } })
$logDurationNumericUpDown.add_ValueChanged({ if ($logDurationNumericUpDown.Value -gt 7) { $durationWarningLabel.Text = "Note: >7 days requires Entra ID P1/P2 license." } else { $durationWarningLabel.Text = "" } })
$getLogsButton.add_Click({ $selectedUpns = $userCheckedListBox.CheckedItems | ForEach-Object { $_.ToString().Split(' ')[0] }; $days = $logDurationNumericUpDown.Value; $outputFolder = $outputFolderTextBox.Text; if ($selectedUpns.Count -eq 0) { [System.Windows.Forms.MessageBox]::Show("Select user(s).", "Selection Error", "OK", "Warning"); return }; if (-not (Test-Path -Path $outputFolder -PathType Container)) { [System.Windows.Forms.MessageBox]::Show("Select a valid output folder.", "Folder Error", "OK", "Warning"); return }; $statusLabel.Text = "Fetching logs for $($selectedUpns.Count) users..."; $mainForm.Cursor = 'WaitCursor'; $getLogsButton.Enabled = $false; $connectButton.Enabled = $false; $disconnectButton.Enabled = $false; if ($openFileButton) { $openFileButton.Enabled = $false }; $allLogs = @(); try { $timestamp = Get-Date -Format "yyyyMMdd_HHmmss"; $baseFileName = "EntraSignInLogs_$timestamp"; $csvFilePath = Join-Path -Path $outputFolder -ChildPath "$($baseFileName).csv"; $xlsxFilePath = Join-Path -Path $outputFolder -ChildPath "$($baseFileName).xlsx"; $startDate = (Get-Date).AddDays(-$days).ToUniversalTime().ToString("yyyy-MM-ddTHH:mm:ssZ"); foreach ($upn in $selectedUpns) { try { $userId = (Get-MgUser -UserId $upn -Property Id).Id; $filterString = "userId eq '$userId' and createdDateTime ge $startDate"; $userLogs = Get-MgAuditLogSignIn -Filter $filterString -All -ErrorAction Stop; if($userLogs) { $userLogs | ForEach-Object { $_ | Add-Member -MemberType NoteProperty -Name 'UserPrincipalName' -Value $upn -Force }; $allLogs += $userLogs } } catch { Write-Warning "Could not get logs for $upn" } }; if ($allLogs.Count -gt 0) { $exportData = $allLogs | Select-Object UserPrincipalName, CreatedDateTime, AppDisplayName, IpAddress, @{N='City';E={$_.Location.City}}, @{N='State';E={$_.Location.State}}, @{N='Country';E={$_.Location.CountryOrRegion}}, @{N='Status';E={$_.Status.ErrorCode}}, @{N='FailureReason';E={$_.Status.FailureReason}}; $exportData | Export-Csv -Path $csvFilePath -NoTypeInformation -Encoding UTF8; if (ConvertTo-XlsxAndFormat -CsvPath $csvFilePath -XlsxPath $xlsxFilePath) { $statusLabel.Text = "Export successful: $xlsxFilePath"; try { Remove-Item $csvFilePath -Force } catch {} } else { $statusLabel.Text = "Exported to CSV, but XLSX conversion failed." } } else { $statusLabel.Text = "No sign-in logs found for selected users in the time period." } } catch { $statusLabel.Text = "Error during export."; Write-Error "Get logs/export failed: $($_.Exception.Message)" } finally { $mainForm.Cursor = 'Default'; $getLogsButton.Enabled = $true; $connectButton.Enabled = $true; $disconnectButton.Enabled = $true } })
$openFileButton.add_Click({ if ($script:lastExportedXlsxPath -and (Test-Path $script:lastExportedXlsxPath)) { try { Invoke-Item -Path $script:lastExportedXlsxPath -ErrorAction Stop } catch { [System.Windows.Forms.MessageBox]::Show("Could not open file: $($_.Exception.Message)", "Error", 'OK', 'Error') } } else { [System.Windows.Forms.MessageBox]::Show("No file from this session to open.", "Info", 'OK', 'Information') } })

# --- Show Form ---
$mainForm.Add_Shown({$mainForm.Activate()})
[void]$mainForm.ShowDialog()
$mainForm.Dispose()